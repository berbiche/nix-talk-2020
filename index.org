#+TITLE: Nix & Nixpkgs for a Reproducible and Declarative Build Environment
#+AUTHOR: Nicolas
#+DATE: 2020-11-15
#+EMAIL: nicolas@normie.dev

#+OPTIONS: num:nil date:nil toc:nil
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_INIT_OPTIONS: width: 1200, height: 800, margin: 0.1, transition: 'fade', slideNumber: true
#+REVEAL_TRANS: slide
#+REVEAL_MIN_SCALE: 0.8
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_HLEVEL: 2
#+REVEAL_THEME: black
#+REVEAL_POSTAMBLE: <p>Created by %a.</p>
#+REVEAL_PLUGINS:(markdown notes highlight)
#+REVEAL_EXTRA_CSS: style.css

#+REVEAL_TITLE_SLIDE: <h1 class="title">%t</h1>
# #+REVEAL_TITLE_SLIDE: <h2 class="author">Created by %a</h2>

* Table of Contents

- [[Language][Language]]
- [[Context][Context]]
  + [[What Is a Package Manager's Role?][What Is a Package Manager's Role?]]
  + [[A Look at RPM][A Look at RPM]]
  + [[Issues With RPM][Issues With RPM]]
  + [[Issues With Most Package Managers][Issues With Most Package Managers]]
#+REVEAL: split
- [[Nix : The Package Manager][Nix : The Package Manager]]
  + [[Features][Features]]
  + [[What Is a Closure][What Is a Closure]]
  + [[What Is a Derivation][What Is a Derivation]]
  + [[What Is a "nar"][What Is a "nar"]]
  + [[The /nix/store][The ~/nix/store~]]
    - [[Why ~/nix/store~ as The Base Directory?][Why ~/nix/store~ as The Base Directory?]]
  + [[Computing a /Package/'s /store path/][Computing a /Package/'s Store Path]]
#+REVEAL: split
- [[Nix : The Language][Nix : The Language]]
- [[Nixpkgs : The Package Registry][Nixpkgs : The Package Registry]]
  + [[Contributing to The Project][Contributing to The Project]]
#+REVEAL: split
- [[Extras][Extras]]
  + [[NixOS][NixOS]]
  + [[home-manager][home-manager]]
- [[Further reading][Further Reading]]

* Language
- Package manager
- Nix
- Nixpkgs
#+BEGIN_NOTES
Let's introduce the language that will be used in the following slides.

- _Package manager_: Essentially, a tool to install bundles on the system.
  A bundle can be an application, a system library, fonts and more.
  The Darwin (MacOS) equivalent is =homebrew= and =macports=.
  The Window's equivalent is =scoop= or the new =winget=.
- _Nix_ is both the name of the domain-specific language and the package manager
- _Nixpkgs_ is the central repository that contains all packages used with /Nix/
  This repository is hosted on GitHub.
#+END_NOTES

* Context
** What Is a Package Manager's Role?
#+ATTR_REVEAL: :frag (frag-style appear)
- Keep track of installed packages
- Provide a way to install a package
- Provide a way to uninstall a package
- Provide a way to upgrade a package

** A Look at RPM
#+ATTR_REVEAL: :frag (frag-style appear)
- Used by many Linux distributions (Fedora, RHEL, openSUSE, Mageia, etc.)
- Low-level tool
- Provides hooks to describe:
  #+ATTR_REVEAL: :frag (frag-style appear)
  - An installation phase
  - A build phase
  - The "uninstall phase" is implicit (all installed files are to be removed)
- A single path can be provided by a single package

#+REVEAL: split
#+ATTR_REVEAL: :code_attribs data-line-numbers='|9-11|13-14|16-19'
#+BEGIN_SRC conf
Summary: Hello World program
Name: hello
Version: 1.0
Source0: %{name}-%{version}.tar.gz

%description
This program prints out "HelloWorld".

%build
./configure --prefix=%{_prefix}
make

%install
make install

%files
/usr/bin/hello
/usr/share/man/man1/hello.1.gz
/etc/hello.conf
#+END_SRC
#+BEGIN_NOTES
This RPM spec file is not typical in that it doesn't use some of the available macros
like ~%make_install~ and ~%configure~.
#+END_NOTES

** Issues With RPM
#+ATTR_REVEAL: :frag (frag-style appear)
- Build environment inherits pre-installed dependencies
  - Having a working build across many machines is harder
  - Can be resolved by using ~Mock~ instead of ~rpmbuild~ (just a chroot)
- Not possible to do atomic upgrades of a package
  - Race conditions
    #+BEGIN_NOTES
    Service =hello-world= is running, using the =hello= binary and the =hello.conf= file. Package =hello= is upgraded and the service, at the same time, having encountered a failure, restarts, using the new binary but the old configuration file.
    #+END_NOTES
- Only a single version of a component can be installed at a given time

** Issues With Most Package Managers
#+ATTR_REVEAL: :frag (frag-style appear)
- Dependency specifications are not validated
  - Unclean build environment
- Dependency specifications are not exact, they are /nominal/ (this is explained later)
- Two dependencies cannot provide the same path (conflict between dependencies)
#+REVEAL: split
- No concept of /all-or-nothing/
  #+BEGIN_NOTES
  _all-or-nothing_: That is, either the system successfully build with all files
  correctly installed or fails and does not leave you in a partial install state.
  #+END_NOTES
- No control over external dependency management (pypi, npm, gems, etc.)
- No way to represent multiple dependencies grouped together (composition)
  #+BEGIN_NOTES
  _composition_: Some package managers have no way to represent the composition of multiple dependencies as a single unit
  #+END_NOTES

* Nix : The Package Manager
#+BEGIN_NOTES
This section goes deeper in how the package manager works than is necessary to know for most uses
#+END_NOTES

** Features
#+ATTR_REVEAL: :frag (frag-style appear)
- Rollback to previous configurations
- Atomic installations and upgrades
- High-level domain-specific language to define a /package/
- Multiple versions of a /package/ can coexist
- Deterministic build of components
  + As long as the derivation is deterministic
  + Implies reproducibility
- *Cross-platform builds!*

#+REVEAL: split
#+ATTR_REVEAL: :frag (frag-style appear)
- Sandboxed builds
  #+ATTR_REVEAL: :frag (frag-style appear)
  + No network access inside the build environment
    unless the hash of the resulting content is known in advance (fixed output derivation)
  + The builder starts with absolutely no environment variables
  + Low-permission users and groups for the build: =nixbld{1..n}=
- No database = no corruption
  + A flat file hierarchy is used with file-locks (flock) when building

#+BEGIN_NOTES
Some of the Nix-specific language used in the following slides will be explained further in this section.
#+END_NOTES

** What Is a Derivation
- Encode a specific, constant build action
- The derivation is represented in a syntax (known as /ATerm/) that can be "realized"
  to build the derivation

#+REVEAL: split

The representation is *not* human readable!

#+BEGIN_EXAMPLE
Derive([("out","/nix/store/byghkc1k0xmrrl2jk04lp0qipmpmz547-hello-2.10","","")],[("/nix/store/10xi5iv5svzxfdxdjzbq0hyxwkyxg8dr-bash-4.4-p23.drv",["out"]),("/nix/store/72zs0ii6pzw6l12v2wnpyspn10ygayv1-hello-2.10.tar.gz.drv",["out"]),("/nix/store/7bk8andhhffxcb34nhgrgghillmil8xr-stdenv-linux.drv",["out"])],["/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh"],"x86_64-linux","/nix/store/516z50fm1jbpcl32qnzy7kynrh0vl22w-bash-4.4-p23/bin/bash",["-e","/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh"],[("buildInputs",""),("builder","/nix/store/516z50fm1jbpcl32qnzy7kynrh0vl22w-bash-4.4-p23/bin/bash"),("configureFlags",""),("depsBuildBuild",""),("depsBuildBuildPropagated",""),("depsBuildTarget",""),("depsBuildTargetPropagated",""),("depsHostHost",""),("depsHostHostPropagated",""),("depsTargetTarget",""),("depsTargetTargetPropagated",""),("doCheck","1"),("doInstallCheck",""),("name","hello-2.10"),("nativeBuildInputs",""),("out","/nix/store/byghkc1k0xmrrl2jk04lp0qipmpmz547-hello-2.10"),("outputs","out"),("patches",""),("pname","hello"),("propagatedBuildInputs",""),("propagatedNativeBuildInputs",""),("src","/nix/store/3x7dwzq014bblazs7kq20p9hyzz0qh8g-hello-2.10.tar.gz"),("stdenv","/nix/store/rh9q5l9wf68v4vqnaag13a2ijas25g14-stdenv-linux"),("strictDeps",""),("system","x86_64-linux"),("version","2.10")])
#+END_EXAMPLE

#+REVEAL: split
#+REVEAL_HTML: <smaller>
#+BEGIN_SRC sh
$ nix show-derivation 'nixpkgs#hello'
{
  "/nix/store/m0i10ghpcwhi2dml0dj6b437jjrh8ia3-hello-2.10.drv": {
    "outputs": {
      "out": {
        "path": "/nix/store/byghkc1k0xmrrl2jk04lp0qipmpmz547-hello-2.10"
      }
    },
    "inputSrcs": [
      "/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh"
    ],
    "inputDrvs": {
      "/nix/store/10xi5iv5svzxfdxdjzbq0hyxwkyxg8dr-bash-4.4-p23.drv": [
        "out"
      ],
      "/nix/store/72zs0ii6pzw6l12v2wnpyspn10ygayv1-hello-2.10.tar.gz.drv": [
        "out"
      ],
      "/nix/store/7bk8andhhffxcb34nhgrgghillmil8xr-stdenv-linux.drv": [
        "out"
      ]
    },
    "platform": "x86_64-linux",
    "builder": "/nix/store/516z50fm1jbpcl32qnzy7kynrh0vl22w-bash-4.4-p23/bin/bash",
    "args": [
      "-e",
      "/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh"
    ],
    "env": {
      "buildInputs": "",
      "builder": "/nix/store/516z50fm1jbpcl32qnzy7kynrh0vl22w-bash-4.4-p23/bin/bash",
      "configureFlags": "",
      "depsBuildBuild": "",
      "depsBuildBuildPropagated": "",
      "depsBuildTarget": "",
      "depsBuildTargetPropagated": "",
      "depsHostHost": "",
      "depsHostHostPropagated": "",
      "depsTargetTarget": "",
      "depsTargetTargetPropagated": "",
      "doCheck": "1",
      "doInstallCheck": "",
      "name": "hello-2.10",
      "nativeBuildInputs": "",
      "out": "/nix/store/byghkc1k0xmrrl2jk04lp0qipmpmz547-hello-2.10",
      "outputs": "out",
      "patches": "",
      "pname": "hello",
      "propagatedBuildInputs": "",
      "propagatedNativeBuildInputs": "",
      "src": "/nix/store/3x7dwzq014bblazs7kq20p9hyzz0qh8g-hello-2.10.tar.gz",
      "stdenv": "/nix/store/rh9q5l9wf68v4vqnaag13a2ijas25g14-stdenv-linux",
      "strictDeps": "",
      "system": "x86_64-linux",
      "version": "2.10"
    }
  }
}
#+END_SRC
#+REVEAL_HTML: </smaller>

** What Is a Closure
"The set of paths that might be accessed in an execution involving the component"[fn:phd-thesis]

Upon building a derivation, Nix will represent the closure using a format known as NAR.

** What Is a "nar"
#+ATTR_REVEAL: :frag (appear)
The /Nix Archive Format/ (short NAR) fixes incompatibilities of ZIP and TAR with the store model.
#+ATTR_REVEAL: :frag (appear)
This format is what is used to compute hashes of a derivation.
#+ATTR_REVEAL: :frag (appear)
This is an in-memory representation, NARs are not persisted on the filesystem.

*** NAR Properties
- Omits time stamps of files
- Omits ownership of files
- Supports files larger than 2^32 bytes
- Preserves only the executable bit (either 444 or 555)
- Guarantees an ordering of the files in the archive
#+BEGIN_NOTES
It goes that /files/ means both regular files and directories.

The exact format of a NAR is defined in Chapter 5 of Edolstra's thesis.
Edolstra's thesis is no longer exact on certain properties:
- Berkeley DB is not used anymore to retain information about the store's state,
  instead flat files are used.
#+END_NOTES

** The /nix/store
#+ATTR_REVEAL: :frag (appear)
When you install a /package/, Nix stores the package under the ~/nix/store~ with the closure.

#+ATTR_REVEAL: :frag (appear)
All time stamps are discarded (Unix epoch = 0) from the files.

#+ATTR_REVEAL: :frag (appear)
The ~/nix/store~ is world-readable on a multi-user installation.
The permission octal is either =644= or =755=.

#+REVEAL: split
Each /package/ is stored under a unique /store path/.
This /store path/ (=/nix/store/hash-derivation_name-version=) is fully deterministic and uses cryptographic hashes that is built upon a derivation's closure.
#+BEGIN_EXAMPLE
/nix/store/13xq2f3q1k64w4f8xbvnb4p0g4754wrk-emacs-ox-reveal-20201025.952
├── nix-support
│   ├── propagated-build-inputs
│   ├── propagated-user-env-packages
│   └── setup-hook
└── share
    └── emacs
        └── site-lisp
            └── elpa
                └── ox-reveal-20201025.952
                    ├── ox-reveal-autoloads.el
                    ├── ox-reveal.el
                    ├── ox-reveal.elc
                    └── ox-reveal-pkg.el
#+END_EXAMPLE

*** Why ~/nix/store~ as The Base Directory?
To allow sharing derivations across machines, the store paths have to be the same.
We call this process substitution.

#+BEGIN_NOTES
- statically compiled packages use libraries from specific paths that are coded
  at build time
- dynamic libraries (~ldd binary~) load libraries from a specific path.
  This path is often injected with a wrapper script.
#+END_NOTES

** Computing a /Package/'s /store path/
- 32 characters long base-32 encoded hash (160 entropy bits)
- Determined by the /closure/ of a package
- Current hashing function: SHA-256
#+BEGIN_NOTES
Fun fact: the characters =e,o,u,t= are excluded to prevent the creation of a hash with offensive words.
#+END_NOTES

#+REVEAL: split
- Because of the use of symbolic links within the tree, a hash
  is composed of both the store path and the symbolic name
- Source inputs and outputs have a different hash to prevent _impersonation_

#+BEGIN_NOTES
For more information on the cryptographic function, chapter 5 of Edolstra's thesis goes into the finer details of choosing the right hashing function.

Mainly, collision resistance and second preimage resistance.

_Collision resistance_: making sure no two =x_1= and =x_2= -> =h(x_1) = h(x_2)=
_Second preimage resistance_: if =x_1= is known, is it not possible to derive =x_2= such that =h(x_1) = h(x_2)=
#+END_NOTES

** Channels
- Imperative way to track the version of nixpkgs used by Nix
- New stable release every 6 month, previous release /end-of-lifed/ 1 month after
- "rolling release" by tracking an unstable branch

#+BEGIN_NOTES
I advise not to track master unless you want to build everything from source.
Channels are just URLs pointing to an archive with a default.nix file inside.
#+END_NOTES

#+REVEAL: split
#+REVEAL_HTML: <iframe width="800" height="500" src="https://status.nixos.org/" frameborder="0"></iframe>

#+REVEAL_HTML: <smaller>
Nixpkgs channels are advanced to a newer revision when a build job succeeds
  on the Hydra infrastructure
#+REVEAL_HTML: </smaller>

#+REVEAL: split
#+BEGIN_QUOTE
Each channel has an associated jobset on Hydra (Nix CI) that is a collection of individual jobs.

A job roughly corresponds to building a particular package, which itself may depend on other packages built by other jobs.
#+END_QUOTE

** Generations & Profiles
This is the part of Nix that allows rollbacks!

#+ATTR_REVEAL: :frag (appear)
A set of packages built can be referred to as environment.
#+ATTR_REVEAL: :frag (appear)
An environment is:
- =PATH=, =EDITOR=, =LIBEXEC_PATH=, =LOCALE_PATH=, ...
#+ATTR_REVEAL: :frag (appear)
An environment can be activated and deactivated, this is referred to as a profile.

#+REVEAL: split
#+BEGIN_SRC sh
$ nix-env -f ~/dev/profile.nix -i
replacing old 'profile'
installng 'profile'
#+END_SRC

#+REVEAL: split
We can make a shell with only the required packages!

#+BEGIN_SRC sh
$ nix-shell -p fish python38
$ python --version
#+END_SRC

#+BEGIN_SRC sh
$ nix-shell -p fish python39
$ python --version
#+END_SRC

* Nix : The Language
** Features
- *DSL* to describe a package
- Lazy
- Functional, everything is an expression
  + Currying, partial application, immutable datastructures
- Mostly pure, side-effects don't really exist
- Allows for recursive attribute sets

#+REVEAL: split
Although lazy, the language does not support lazy lists like Haskell
or other languages
#+BEGIN_SRC sh
time nix-instantiate --eval -E '
    with (import <nixpkgs> {}).lib;
    take 5 (range 0 (15000 * 1000))
'
# => 1.18s user 0.23s system 165% cpu 0.856 total
#+END_SRC

** Syntax

Adapted from [[https://learnxinyminutes.com/docs/nix][Learn X in Y Minutes, Where X=nix]]

#+REVEAL_HTML: <smaller>
#+ATTR_REVEAL: :code_attribs data-line-numbers='2-4|6-8|10-12|14-25|27-33|35-41|43-53|55-62|64-75|78-84|86-89|91-97|99-100|102-106|108-112|114-123|125-132|134-140|142-148|150-155'
#+BEGIN_SRC nix
with builtins; [
  # Inline comments look like this.
  /* Multi-line comments
     look like this. */

  (true && false)
  (true || false)
  (if 3 < 4 then "a" else "b")

  1 0 42 (-3)
  123.43 .27e13
  (4 + 6 / 2 - 2)

  "Strings literals are in double quotes."
  "
    String literals can span
    multiple lines.
  "
  ''
    a
      b
  ''
  #=> "a\n  b"
  ("ab" + "cd")   # String concatenation
  ("Your home directory is ${getEnv "HOME"}")

  (/tmp/tutorials/learn.nix == ./learn.nix)
  (./. + "/learn.nix" == ./learn.nix)
  /. # => Root Folder
  # The / operator must be surrounded by whitespace if
  # you want it to signify division.
  7/2        # This is a path literal
  (7 / 2)    # This is integer division

  (import /tmp/foo.nix)
  (import "/tmp/foo.nix")
  ((import /tmp) == (import /tmp/default.nix))
  (import ./foo.nix)
  (import "./foo.nix")   # => Error
  (import <nixpkgs>)
  (import <my-channel/a-path/sub-path>)

  (let y = x + "b";
       x = "a";
   in y + "c")

  # Functions
  (n: n + 1)
  ((n: n + 1) 5)   #=> 6
  # Currying and partial application
  (let add = a: b: a + b
       add3 = add 3
   in add3 5)

  (length [1 2 3 "x"])
  #=> 4
  ([1 2 3] ++ [4 5])
  #=> [1 2 3 4 5]
  (concatLists [[1 2] [3 4] [5]])
  #=> [1 2 3 4 5]
  (flatten [[[1 [2]]] [3] 4])
  #=> [1 2 3 4]

  (head [1 2 3])
  #=> 1
  (init [1 2 3])
  #=> [1 2]
  (last [1 2 3])
  #=> 3
  (tail [1 2 3])
  #=> [2 3]
  (elemAt ["a" "b" "c" "d"] 2)
  #=> "c"
  (elem 2 [1 2 3])
  #=> true


  { foo = [1 2]; bar = "x"; }
  { a = 1; b = 2; }.a
  #=> 1
  ({ a = 1; b = 2; } ? a)
  #=> true
  ({ a = 1; b = 2; } // { a = 3; c = 4; })
  #=> { a = 3; b = 2; c = 4; }

  (let a = 1; in     { a = 2; b = a; }.b)
  #=> 1
  (let a = 1; in rec { a = 2; b = a; }.b)
  #=> 2

  # The following notation is syntactic sugar
  {
    a.b   = 1;
    a.c.d = 2;
    a.c."d.f" = 4;
  }.a.c
  #=> { d = 2; "d.f" = 4; }

  ({ a.b = { d = 2; }; }.a.b.c or 1)
  #=> 1

  {
    a = { b = 1; };
    a.b = 2;
  }
  #=> attribute 'a.b' at (string):3:5 already defined at (string):2:11

  {
    a = { b = 1; };
    a.c = 2;
  }
  #=> { a = { b = 1; c = 2; }; }

  (let a = "foo"; in {
    ${a}.b = "bar";
  }.${a})
  #=> { b = "bar"; }

  {
     "${"foo"}".a = 1;
     "${"foo"}".b = 2;
  }
  #=> error: dynamic attribute 'foo' already defined at (string):1:3

  ({x, y}: x + "-" + y) { x = "a"; y = "b"; }
  #=> "a-b"

  ({x, y}: []) { x = "a"; y = "b"; z = "c"; }
  #=> error: anonymous function called with unexpected argument ‘z’

  ({x, y, ...}: x + "-" + y) { x = "a"; y = "b"; z = "c"; }
  #=> "a-b"

  (
   (args@{x, y, ...}: removeAttrs args [ "x" "y" ])
   { x = "a"; y = "b"; z = "c"; }
  )
  #=> { z = "c"; }
  (functionArgs (args@{x, y, ...}: []))
  #=> { x= false; y = false; }

  (
    ({x, y ? "y"}: x + y)
      { x = "x"; }
  )
  #=> "xy"
  (functionArgs ({x, y ? "y"}: x + y))
  #=> { x = false; y = true; }

  (throw "foo")
  #=> error: foo
  (abort "foo")
  #=> error: evaluation aborted with the following error message: 'foo'
  (assert 1 > 2; 42)
  #=> error: assertion failed at (string):1:1
]
#+END_SRC

** Nix REPL

#+BEGIN_EXAMPLE sh
$ nix repl '<nixpkgs>'
Welcome to Nix version 3.0pre20201020_e0ca98c. Type :? for help.

Loading '<nixpkgs>'...
Added 12635 variables.

nix-repl> lib.<TAB>
lib.__unfix                          lib.mapAttrsFlatten
lib.add                              lib.mapAttrsRecursive
...

nix-repl> pkgs.hello<TAB>
pkgs.hello         pkgs.hello-unfree

nix-repl> pkgs.hello
«derivation /nix/store/j6lmvi01h17w5a1lx41xwgw00j0wbz6g-hello-2.10.drv»
#+END_EXAMPLE

#+BEGIN_NOTES
When invoking =nix_repl=, a channel or an URL can be passed to be loaded.
The URL/channel

* Nixpkgs : The Package Registry
#+CAPTION: Amount of packages in Nixpkgs
#+NAME: fig:package-count.png
#+ATTR_ORG: :width 500
[[./images/package-count.png]][fn:package-count]
[fn:package-count]: https://discourse.nixos.org/t/how-many-people-are-paid-to-work-on-nix-nixpkgs/8307/66

** Example Package
#+ATTR_REVEAL: :code_attribs data-line-numbers="1-5|7-9|10,14|24-30|32-33|38|40-45"
#+BEGIN_SRC nix
{ stdenv, fetchurl, coreutils, pam, groff, sssd
, sendmailPath ? "/run/wrappers/bin/sendmail"
, withInsults ? false
, withSssd ? false
}:

let
  inherit (stdenv.lib) optional;
in
stdenv.mkDerivation rec {
  pname = "sudo";
  version = "1.9.3p1";

  src = fetchurl {
    url = "https://www.sudo.ws/dist/${pname}-${version}.tar.gz";
    sha256 = "17mldsg5d08s23cskmjxfa81ibnqw3slgf3l4023j72ywi9xxffw";
  };

  prePatch = ''
    # do not set sticky bit in nix store
    substituteInPlace src/Makefile.in --replace 04755 0755
  '';

  configureFlags = [
    # ...
    "--enable-tmpfiles.d=no"
  ] ++ optional withInsults [
    "--with-insults"
    "--with-all-insults"
  ];

  nativeBuildInputs = [ groff ];
  buildInputs = [ pam ];

  enableParallelBuilding = true;
  doCheck = false;

  passthru.dummy = 1;

  meta = with stdenv.lib; {
    description = "A command to run commands as root";
    license = "https://www.sudo.ws/sudo/license.html";
    maintainers = with maintainers; [ eelco delroth ];
    platforms = platforms.linux;
  };
}
#+END_SRC
#+BEGIN_NOTES
This is not the full /sudo/ expression.
#+END_NOTES

** Build Phases
Generic phases (in order):
- =unpackPhase=
- =patchPhase=
- =configurePhase=
- =buildPhase=
- =checkPhase=
- =installPhase=
- =fixupPhase=
- =installCheckPhase=
- =distPhase=

#+REVEAL: split
Each phase can be (de)activated
- ~dontUnpack = true;~
- ~dontPatch = true;~
- ~dontConfigure = true;~
- ~dontBuild = true;~
- ~doCheck = true;~
- ~dontInstall = true;~
- ~dontFixup = true;~
- ~doInstallCheck = true;~
- ~doDist = true;~

#+REVEAL: split
Build phases typically have a =pre-phase= and a =post-phase=.
So =preInstall= and =postInstall=.

** Build farms

** Cache
The cache of all packages surpasses 300TB!

- Not distributed: infeasible with the current architecture

The cryptographic properties of the =/nix/store= and derivations, allow serving a derivation's result without building locally!

This is what we call a /substituer/.
#+BEGIN_NOTES
#+END_NOTES

** Contributing to The Project

LIVE DEMO!

* Extras
** NixOS

Built on top of Nix, the system configuration is entirely declarative!

*** Overlays

** home-manager

https://github.com/nix-community/home-manager/

Configure your /dotfiles/ in a cross-platform, distribution-agnostic way!

#+REVEAL: split
#+BEGIN_SRC nix
{ pkgs, ... }:

{
  home.packages = [ pkgs.htop ];

  programs.emacs = {
    enable = true;
    extraPackages = epkgs: with epkgs; [
      nix-mode
      magit
    ];
  };

  programs.alacritty = {
    enable = lib.mkIf isLinux true;
    settings = {
      # ...
    };
  };

  # Fictive
  systemd.user.services.notification = {
    Service = {
      Type = "dbus";
      BusName = "org.freedesktop.notifications";
      ExecStart = "${pkgs.notification}/bin/notification";
    };
  };
}
#+END_SRC

* Further reading

#+REVEAL_HTML: <smaller>
| Edolstra's thesis on Nix                        | https://edolstra.github.io/pubs/phd-thesis.pdf                                              |
| Charon: Declarative Provisioning and Deployment | https://github.com/edolstra/edolstra.github.io/blob/master/pubs/charon-releng2013-final.pdf |
| Nix language built-in functions                 | https://nixos.org/manual/nix/unstable/expressions/builtins.html                             |
#+REVEAL_HTML: </smaller>
#+REVEAL: split
#+REVEAL_HTML: <smaller>
| Nixpkgs library functions                       | https://nixos.org/manual/nixpkgs/unstable/#chap-functions                                   |
| NixOS options (search)                          | https://search.nixos.org/options                                                            |
| NixOS options (full-list)                       | https://nixos.org/manual/nixos/unstable/options.html                                        |
| home-manager options                            | https://nix-community.github.io/home-manager/options.html                                   |
#+REVEAL_HTML: </smaller>

* Footnotes
[fn:phd-thesis] https://github.com/edolstra/edolstra.github.io/blob/master/pubs/phd-thesis.pdf
